////////////////////////////////////////////////////////////////////////
//
// [=$classfilename].cpp
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include "Resource.h"
using namespace std;
[
' // Include all necessary header-files
' ////////////////////////////////////////////////////////////////////////
foreach $tmplibrary in $application.Libraries
	if not $tmplibrary.IsDuplicate
		if $tmplibrary.Kind <> 4	' Parameter Library
]#include "../[=$tmplibrary.Name]/[=$tmplibrary.Name].h"
[		endif
	endif 
next

' userdefined-function-libraries
foreach $FuncLib in $application.FunctionLibraries
	if $FuncLib.Name <> "core" and $FuncLib.Name <> "db" and $FuncLib.Name <> "lang" and $FuncLib.Name <> "edifact" and not $FuncLib.HasOnlyLocalFunctions
		foreach $Setting in $FuncLib.Settings
			if $Setting.Name = "include"
]#include "../[=$FuncLib.Name]/[=$Setting.Value]"
[			endif
		next
]using namespace [=$FuncLib.Name];
[	endif 
next
]#include "[=$classfilename].h"

#ifdef _DEBUG
	#define new DEBUG_NEW
	#undef THIS_FILE
	static char THIS_FILE\[\] = __FILE__;
#endif

[

if $AlgorithmGroup.IsLocalFunction
]namespace [=$AlgorithmGroup.LocalFunctionNamespace] 
{
[
endif

' // Implementation Run(..)
' ////////////////////////////////////////////////////////////////////////
call DeclareRun( false )
]{
	// Open the source(s)
[
$Args					= ""
$gFirstSourceInstance	= ""
call OpenSourceLibraries( $Args, $gFirstSourceInstance )

]	// Create the target
[
$Indent 				= "	"
$gTargetInstance 		= ""
call OpenTargetLibrary( $Args, $Indent, $gTargetInstance )
]
[=$Indent]// Execute mapping
[
call ExecuteMapping( $Args, $Indent, $gFirstSourceInstance, $gTargetInstance )
]
	// Close the target
[
call FinalizeTargetLibrary()
]}
[



' // Implementation member-functions
' ////////////////////////////////////////////////////////////////////////

foreach $Algorithm in $AlgorithmGroup.FlatSubAlgorithms]
[
	if $Algorithm.Type <> 11 and $Algorithm.Type <> 5	' Assignment, Variable
		'and not ($Algorithm.Type = 8 and $Algorithm.IsDocSwitchLoop) ' not an assignment and not a DocSwitch-loop

		' initialize local variables
		$Args				= ""
		$gSourceParameter	= ""
		$gTargetParameter	= ""
		$gIsFirstListLoop	= true
		$gIsDBLoop 			= false
		$ExceptionTargetType = ""
		$ExceptionTarget = ""

		call CalculateArguments( $Args, $Algorithm, $gSourceParameter, $gTargetParameter )
]
void [=$classname]::[=$Algorithm.Name]( [=$Args] )
{
[		$Indent = "	"
		' ---------- initialisation ----------
		if $Algorithm.Type = 6 ' sourcedata
			call ExecuteSourceData( $Indent, $Algorithm, $gSourceParameter )
		else : if $Algorithm.Type = 8 ' loop
			call ExecuteBeginLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
		else : if $Algorithm.Type = 17 ' distribute
			call ExecuteBeginDistribute( $Indent, $Algorithm, $gSourceParameter )
		else : if $Algorithm.Type = 10 ' create
			call ExecuteBeginCreate( $Indent, $Algorithm )
		else : if $Algorithm.Type = 18 ' exception
			call ExecuteInstantiateNewTarget( $Indent, $Algorithm, $ExceptionTarget, $ExceptionTargetType )
		endif : endif : endif : endif : endif

		' ---------- apply sub-algorithms ----------
		$gIsFirstListLoop = true
		foreach $SubAlgorithm in $Algorithm.SubAlgorithms
			if $SubAlgorithm.Type = 11 ' assignment
				call ExecuteAssignment( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 5 ' variable
				call ExecuteVariable( $Indent, $SubAlgorithm, $gTargetParameter )
			else : if $SubAlgorithm.Type = 9 ' filter
				call ExecuteFilter( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 16	' exists-return
				call ExecuteIfExistsReturn( $Indent, $SubAlgorithm)
			else : if $Algorithm.Type = 17 and $SubAlgorithm.Type = 8
				call ExecuteDistLoop( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 8 and $SubAlgorithm.HasCreateChild_TargetTableLoop and $gIsFirstListLoop ' loop
				call ExecuteSubLoop( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
			else : if $SubAlgorithm.Type = 10 and $SubAlgorithm.IsTable and $gIsFirstListLoop ' create
				call ExecuteSubCreate( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
			else
][=$Indent][=$SubAlgorithm.Name]( [if $gSourceParameter <> ""][=$gSourceParameter], [endif ][=$gTargetParameter] );
[			endif : endif : endif : endif : endif : endif : endif
		next
		' ---------- finalisation ----------
		if $Algorithm.Type = 8 'and not $Algorithm.IsParentLoop and not $Algorithm.IsDocSwitchLoop ' loop
			call ExecuteEndLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
		else : if $Algorithm.Type = 17 ' distribute
			call ExecuteEndDistribute( $Indent, $Algorithm, $gTargetParameter )
		else : if $Algorithm.Type = 10 ' create
			call ExecuteEndCreate( $Indent, $Algorithm, $gTargetParameter, $gIsFirstListLoop )
		else : if $Algorithm.Type = 18 ' create exception
			][=$Indent]throw CAltovaException(4242, [=$ExceptionTarget], true);
[		endif : endif : endif endif
]}

[	endif 
next


if $AlgorithmGroup.IsLocalFunction
	$gArgs = ""
	$gIsFirst = true
	foreach $gSourceLibrary in $AlgorithmGroup.SourceLibraryList : if $gSourceLibrary.Kind = 4
		if not $gIsFirst : $gArgs = $gArgs & ", " : endif
		$gArgs = $gArgs & $gSourceLibrary.DataType & "& " & $gSourceLibrary.UniqueName & "SourceParameter"
		$gIsFirst = false
	endif : next
]// global function in library-namespace
[=$AlgorithmGroup.TargetContext.Library.DataType] [=$AlgorithmGroup.Name]( [=$gArgs] )
{
	[=$classname]	function;
	[=$AlgorithmGroup.TargetContext.Library.DataType]	result;
[	$gArgs = ""
	$gIsFirst = true
]
	function.Run( [
	foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
		if not $gIsFirst ], [ endif

		if $SourceLibrary.Kind = 1 ' XML Library
			]_T( "[=$SourceLibrary.InputInstanceName]" )[
		endif
		if $SourceLibrary.Kind = 2 ' Database Library
			]_T( "[=$SourceLibrary.ADOConnectionString]" )[
		endif
		if $SourceLibrary.Kind = 3 ' Text Parser Library
			]_T( "[=$SourceLibrary.InputFileName]" )[
		endif
		if $SourceLibrary.Kind = 4	' Parameter Library
			][=$SourceLibrary.UniqueName]SourceParameter[
		endif

		$gIsFirst = false
	next
	][if not $gIsFirst], [endif
	]result );

	return result;
}


}	// namespace [=$AlgorithmGroup.LocalFunctionNamespace]
[endif

' EOF
]