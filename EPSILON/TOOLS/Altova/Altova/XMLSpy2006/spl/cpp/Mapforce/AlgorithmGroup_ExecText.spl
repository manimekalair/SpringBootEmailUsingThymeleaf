[
' // Subroutines for AlgorithmGroup.h / AlgorithmGroup.cpp
' // Language = C++
' ////////////////////////////////////////////////////////////////////////

' // Text execution implementation subroutines
' ////////////////////////



' ------------------------------------------------------------------------
' ExecuteBeginLoopText:
' ------------------------------------------------------------------------
sub ExecuteBeginLoopText( byref $rQType, byref $rIndent, byref $rAlgorithm, byref $rSourceParameter )
	'Define the qualified type name for generated variables in the loop
	if $rAlgorithm.SourceContext.Library.Kind = 3 ' TXT-loop
		$rQType = $rAlgorithm.SourceContext.LibraryPrefix & "::" & "C" & $rAlgorithm.SourceContext.Name & "Type"
	endif

	call ExecuteBeginLoopXML( $rQType, $rIndent, $rAlgorithm, $rSourceParameter, "TEXT" )
endsub




' ------------------------------------------------------------------------
' ExecuteEndCreateText:
' ------------------------------------------------------------------------
sub ExecuteEndCreateText( byval $lIndent, byref $rAlgorithm )
][=$lIndent][=$rAlgorithm.TargetParentContext.UniqueName]TargetObject.Add[=$rAlgorithm.TargetContext.Name]( [=$rAlgorithm.TargetContext.UniqueName]TargetObject );
[
endsub

' ------------------------------------------------------------------------
' ExecuteBeginDistributeTXT:
' ------------------------------------------------------------------------
sub ExecuteBeginDistributeTXT( byref $rIndent, byref $rAlgorithm, byref $rSourceParameter )
][=$rIndent]CTextNodeContainer& rChildren = [=$rAlgorithm.SourceParentContext.UniqueName]SourceObject.GetNode().GetChildren();
[=$rIndent]for(size_t i = 0; i<rChildren.GetCount(); ++i)
[=$rIndent]{
[=$rIndent][=$rIndent]CTextNode& rNode = rChildren.GetAt(i);
[endsub

' ------------------------------------------------------------------------
' ExecuteDistLoopTXT:
' ------------------------------------------------------------------------
sub ExecuteDistLoopTXT( byref $rIndent, $rAlgorithm, byref $rSubAlgorithm, byref $rSourceParameter, byref $rTargetParameter  )

	$lQType = QualifiedTypeName($rSubAlgorithm.SourceContext)

	if $rSubAlgorithm.SourceContext.IsBuiltinType
		$lArgs = "( rNode.GetValue() )"
	else
		$lArgs = "( rNode )"
	endif
	
][=$rIndent][=$rIndent]if (rNode.GetName() == _T("[=$rSubAlgorithm.SourceContext.Name]"))
[=$rIndent][=$rIndent]{
[$srcParam = $lQType & $lArgs
][=$rIndent][=$rIndent][call ExecuteBlock( $rIndent, $rSubAlgorithm.SubAlgorithms, $srcParam, $rTargetParameter, $rSubAlgorithm )
][=$rIndent][=$rIndent]}
[endsub

' ------------------------------------------------------------------------
' ExecuteEndDistributeTXT:
' ------------------------------------------------------------------------
sub ExecuteEndDistributeTXT( byref $rIndent, byref $rAlgorithm, byref $rTargetParameter )
][=$rIndent]}
[endsub

' EOF
]
