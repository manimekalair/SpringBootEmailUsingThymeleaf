////////////////////////////////////////////////////////////////////////
//
// [=$classfilename].h
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////

#ifndef [=$classfilename]_H_INCLUDED
#define [=$classfilename]_H_INCLUDED

#if _MSC_VER > 1000
	#pragma once
#endif // _MSC_VER > 1000

[' ========== include wrapper libraries ==========
foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList ': if not $SourceLibrary.IsDuplicate
	if $SourceLibrary.Kind <> 4	' Parameter Library
		$Tmp		= $SourceLibrary.Name
]#include "../[=$Tmp]/[=$Tmp].h"
[	endif
	'endif 
next

if $AlgorithmGroup.TargetParentContext.Kind <> 4	' Parameter Library
	$Tmp		= $AlgorithmGroup.TargetParentContext.LibraryName
]#include "../[=$Tmp]/[=$Tmp].h"
[endif


if $AlgorithmGroup.IsLocalFunction
]namespace [=$AlgorithmGroup.LocalFunctionNamespace] 
{[
endif
]

class [=$classname] //: public altova::CTraceProvider
{
protected:
	// documents
[' ========== declare member variables ==========
foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]	[=$SourceLibrary.Name]::C[=$SourceLibrary.Type] m_[=$SourceLibrary.UniqueName]DocSourceObject;
[	endif
next
]	// instances
[foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]	[write QualifiedTypeName($SourceLibrary.RootElement)]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 2 ' Database Library
]	[=$SourceLibrary.Name]::[=$SourceLibrary.Type]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 3 ' Text Parser Library
]	[=$SourceLibrary.Name]::[=$SourceLibrary.Type]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 4 ' Parameter Library
]	[=$SourceLibrary.DataType]	m_[=$SourceLibrary.Name];
[	endif
next
]	// members
[foreach $Algorithm in $AlgorithmGroup.FlatMemberVariables
	if $Algorithm.Type = 8	' Loop-variable stored
]	[=$Algorithm.SourceParentContext.Library.Name]::[=$Algorithm.SourceParentContext.Type]	m_[=$Algorithm.Name];
[	else : if $Algorithm.IsComplex
		if $Algorithm.DataTypeNr = 48  ' anyType
]	CAnyTypeNode	m_[=$Algorithm.VarID];
[		else
]	[write QualifiedTypeName($Algorithm.SourceContext)]	m_[=$Algorithm.VarID];
[		endif
	else
]	[=$Algorithm.DataType]	m_[=$Algorithm.VarID];
[	endif : endif
next


call DeclareRun( true )
]
[
call DeclareSubAlgorithms()
]
};

[if $AlgorithmGroup.IsLocalFunction
	$gArgs = ""
	$gIsFirst = true
	foreach $gSourceLibrary in $AlgorithmGroup.SourceLibraryList : if $gSourceLibrary.Kind = 4
		if not $gIsFirst : $gArgs = $gArgs & ", " : endif
		$gArgs = $gArgs & $gSourceLibrary.DataType & "& " & $gSourceLibrary.UniqueName & "SourceParameter"
		$gIsFirst = false
	endif : next
]// global function in library-namespace
[=$AlgorithmGroup.TargetContext.Library.DataType] [=$AlgorithmGroup.Name]( [=$gArgs] );

}	// namespace [=$AlgorithmGroup.LocalFunctionNamespace]
[endif]
#endif // [=$classfilename]_H_INCLUDED
