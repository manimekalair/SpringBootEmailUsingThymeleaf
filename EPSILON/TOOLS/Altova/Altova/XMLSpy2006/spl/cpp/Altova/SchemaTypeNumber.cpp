////////////////////////////////////////////////////////////////////////
//
// SchemaTypeNumber.h
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include "Altova.h"
#include "AltovaException.h"
#include "SchemaTypeNumber.h"

#include <math.h>


namespace altova {



////////////////////////////////////////////////////////////////////////
//
//  CSchemaBoolean
//
////////////////////////////////////////////////////////////////////////

CSchemaBoolean& CSchemaBoolean::operator=( const bool bValue )	
{ 
	SetIsEmpty( false ); 
	m_Value = bValue; 
	return *this; 
}


bool CSchemaBoolean::ToBool() const
{ 
	if( !CSchemaType::ToBool() )
		return false;
	return m_Value; 
}


CSchemaBoolean::operator tstring() const
{
	if( IsEmpty() )
		return _T("");
	return m_Value ? _T("true") : _T("false");
}


[if $DBLibraryCount > 0 ]
CSchemaBoolean::operator _variant_t() const 
{ 
	if( IsEmpty() )
		return _variant_t();
	return m_Value; 
}
[endif]


void CSchemaBoolean::Empty()		
{ 
	CSchemaType::Empty();
	m_Value = false; 
}


bool CSchemaBoolean::Parse( const TCHAR* szValue )
{
	if( !CSchemaType::Parse( szValue ) )
		return false;

	m_Value = _tcscmp(szValue, _T("true")) == 0 || _tcscmp(szValue, _T("1")) == 0;

	return !IsEmpty();
}


CSchemaType&	CSchemaBoolean::Assign( const CSchemaType& rOther )
{ 
	if( CSchemaType::Assign( rOther ).IsEmpty() )
		return *this;

	m_Value = rOther.ToBool();

	return *this;
}


 


} // namespace altova