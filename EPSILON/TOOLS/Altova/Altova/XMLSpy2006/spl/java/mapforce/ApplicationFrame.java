/**
 * [=$application.Name]Frame.java
 *
 * This file was generated by [=$Host].
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the [=$HostShort] Documentation for further details.
 * [=$HostURL]
 */


package [=$JavaPackageName];

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import com.altova.types.*;


public class [=$application.Name]Frame extends JFrame implements com.altova.TraceTarget {
[if $InputParameterCount > 0
]	java.util.Hashtable	mapArguments = new java.util.Hashtable();

[endif
]	JPanel			contentPane;
	TitledBorder	titledBorder1;

	JScrollPane	jScrollPaneStructures	= new JScrollPane();
	JPanel		jPanelStructures		= new JPanel();
	JLabel		jIconLabel				= new JLabel();
	JLabel		jInfoLabel1				= new JLabel();
	JLabel		jInfoLabel2				= new JLabel();
	JLabel		jInfoLabel3				= new JLabel();
	JButton		jStartButton			= new JButton();
	JPanel		jPanel1					= new JPanel();
	JScrollPane	jTraceScrollPane		= new JScrollPane();
	JTextArea	jTraceTextArea			= new JTextArea();
[
$Nr = 0
foreach $Mapping in $application.Mappings
	foreach $AlgorithmGroup in $Mapping.AlgorithmGroups
		' Source Libraries
		foreach $library in $AlgorithmGroup.SourceLibraryList
]
	JLabel j[=$library.Name]Label[=$Nr] = new JLabel();
	JTextField j[=$library.Name]TextField[=$Nr] = new JTextField();
[
			$Nr = $Nr + 1
		next

		' Target Library
]
	JLabel j[=$AlgorithmGroup.TargetLibrary.Name]Label[=$Nr] = new JLabel();
	JTextField j[=$AlgorithmGroup.TargetLibrary.Name]TextField[=$Nr] = new JTextField();
[
		$Nr = $Nr + 1
	next
next
]
	public [=$application.Name]Frame() {
		enableEvents(AWTEvent.WINDOW_EVENT_MASK);
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jbInit() throws Exception {
		contentPane = (JPanel)this.getContentPane();
		titledBorder1 = new TitledBorder("");

		contentPane.setLayout(null);
		this.setSize(new Dimension(603, 511));
		this.setTitle("Mapforce Application");

		jStartButton.setBounds(new Rectangle(12, 317, 78, 27));
		jStartButton.setFont(new java.awt.Font("Dialog", 0, 11));
		jStartButton.setText("Start");
		jStartButton.addActionListener(new [=$application.Name]Frame_jStartButton_actionAdapter(this));

		contentPane.setEnabled(false);
		contentPane.setDebugGraphicsOptions(0);
		contentPane.setDoubleBuffered(true);
		contentPane.setMaximumSize(new Dimension(400, 250));
		contentPane.setMinimumSize(new Dimension(400, 250));
		contentPane.setPreferredSize(new Dimension(400, 250));

		jTraceTextArea.setBackground(Color.white);
		jTraceTextArea.setForeground(Color.black);
		jTraceTextArea.setPreferredSize(new Dimension(0, 17));
		jTraceTextArea.setToolTipText("");
		jTraceTextArea.setText("");
		jTraceTextArea.setRows(20);

		jTraceScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jTraceScrollPane.setViewportBorder(null);
		jTraceScrollPane.setAutoscrolls(true);
		jTraceScrollPane.setBorder(BorderFactory.createLineBorder(Color.black));
		jTraceScrollPane.setDebugGraphicsOptions(0);
		jTraceScrollPane.setToolTipText("");
		jTraceScrollPane.setVerifyInputWhenFocusTarget(true);
		jTraceScrollPane.setBounds(new Rectangle(21, 385, 562, 75));

		jScrollPaneStructures.setBorder(BorderFactory.createLineBorder(Color.black));
		jScrollPaneStructures.setBounds(new Rectangle(22, 110, 561, 206));

		jPanelStructures.setLayout(null);

		jPanel1.setBackground(Color.white);
		jPanel1.setBounds(new Rectangle(10, 10, 101, 463));
		jPanel1.setLayout(null);

		jIconLabel.setIcon(new ImageIcon([=$application.Name]Frame.class.getResource("mapforce.png")));
		jIconLabel.setText("");
		jIconLabel.setBounds(new Rectangle(12, 11, 76, 76));

		jInfoLabel1.setText("THIS APPLICATION WAS GENERATED BY [=$Host]");
		jInfoLabel1.setBounds(new Rectangle(121, 13, 475, 15));

		jInfoLabel2.setForeground(Color.blue);
		jInfoLabel2.setText("http://www.altova.com/mapforce");
		jInfoLabel2.setBounds(new Rectangle(121, 30, 475, 15));

		jInfoLabel3.setBounds(new Rectangle(121, 54, 475, 15));
		jInfoLabel3.setText("Please check the input and output files, and press the Start button...");

		contentPane.add(jTraceScrollPane, null);
		jTraceScrollPane.getViewport().add(jTraceTextArea, null);
		contentPane.add(jScrollPaneStructures, null);

		jPanel1.add(jIconLabel, null);
		jPanel1.add(jStartButton, null);

		contentPane.add(jInfoLabel1, null);
		contentPane.add(jInfoLabel2, null);
		contentPane.add(jInfoLabel3, null);
		contentPane.add(jPanel1, null);

		jScrollPaneStructures.getViewport().add(jPanelStructures, null);

[
$Nr = 0
foreach $Mapping in $application.Mappings
	foreach $AlgorithmGroup in $Mapping.AlgorithmGroups
		' Source Libraries
		foreach $library in $AlgorithmGroup.SourceLibraryList
			$y1 = $Nr * 65 + 10
			$y2 = $Nr * 65 + 35

			call jbInit( $library, $Nr )

			$Nr = $Nr + 1
		next

		' Target Library
		$y1 = $Nr * 65 + 10
		$y2 = $Nr * 65 + 35

		call jbInit( $AlgorithmGroup.TargetLibrary, $Nr )

		$Nr = $Nr + 1
	next
next
]
	}

	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			System.exit(0);
		}
	}

    void jStartButton_actionPerformed(ActionEvent e) {
		if (e.getSource().equals(jStartButton)) {
			jStartButton.setEnabled(false);
			jTraceTextArea.removeAll();
			jTraceTextArea.append("Started...\\n");
			com.altova.TraceTarget ttc = this;

			try {
[include "java/mapforce/ApplicationMain.java"]
				jTraceTextArea.append("Finished\\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			jStartButton.setEnabled(true);
		}
    }

[
$Nr = 0
foreach $Mapping in $application.Mappings
	foreach $AlgorithmGroup in $Mapping.AlgorithmGroups
		' Source Libraries
		foreach $library in $AlgorithmGroup.SourceLibraryList
			if $library.Kind = 4	' Parameter Library
]	void j[=$library.Name]TextField[=$Nr]_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( j[=$library.Name]TextField[=$Nr] ) ) {
			String value = j[=$library.Name]TextField[=$Nr].getText();
			if( value.length() != 0 )
				mapArguments.put( "[=$library.Name]", value );
			else {
				if( mapArguments.containsKey( "[=$library.Name]" ) )
					mapArguments.remove( "[=$library.Name]" );
			}
		}
	}

[			endif
			$Nr = $Nr + 1
		next

		' Target Library --> just skip it
		$Nr = $Nr + 1
	next
next
]
	public void writeTrace(String info) {
		jTraceTextArea.append(info);
	}
}

class [=$application.Name]Frame_jStartButton_actionAdapter
	implements java.awt.event.ActionListener {
	[=$application.Name]Frame adaptee;

	[=$application.Name]Frame_jStartButton_actionAdapter([=$application.Name]Frame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.jStartButton_actionPerformed(e);
	}
}

[
$Nr = 0
foreach $Mapping in $application.Mappings
	foreach $AlgorithmGroup in $Mapping.AlgorithmGroups
		' Source Libraries
		foreach $library in $AlgorithmGroup.SourceLibraryList
			if $library.Kind = 4	' Parameter Library
]
class [=$application.Name]Frame_j[=$library.Name]TextField[=$Nr]_keyAdapter
	implements java.awt.event.KeyListener {
	[=$application.Name]Frame adaptee;

	[=$application.Name]Frame_j[=$library.Name]TextField[=$Nr]_keyAdapter( [=$application.Name]Frame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.j[=$library.Name]TextField[=$Nr]_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.j[=$library.Name]TextField[=$Nr]_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.j[=$library.Name]TextField[=$Nr]_actionPerformed( e );
	}

}

[			endif
			$Nr = $Nr + 1
		next

		' Target libraries --> just skip it
		$Nr = $Nr + 1
	next
next

' EOF
]