/**
 * [=$classfilename].java
 *
 * This file was generated by [=$Host].
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the [=$HostShort] Documentation for further details.
 * [=$HostURL]
 */


[if $AlgorithmGroup.IsLocalFunction
]package [=$JavaPackageName].[=$AlgorithmGroup.LocalFunctionNamespace];
[else
]package [=$JavaPackageName];
[endif
]
import com.altova.types.*;
[if $DBLibraryCount > 0
]import com.altova.db.*;
[endif
if $EDILibraryCount > 0
]import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edifact.*;
[endif
]import java.util.*;

[
foreach $tmplibrary in $application.Libraries
	]import [=$JavaPackageName].[=$tmplibrary.Name].*;
[next]

public class [=$classname] extends com.altova.TraceProvider {

	// XML documents
[
foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]	protected [=$JavaPackageName].[=$SourceLibrary.Name].[=$SourceLibrary.Type] var[=$SourceLibrary.UniqueName]DocSourceObject; 
[	endif
next
]	// instances
[foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]	protected [write QualifiedTypeName($SourceLibrary.RootElement)]	var[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 5 ' WSDL Library
]	public [write QualifiedTypeName($SourceLibrary.Message)]	var[=$SourceLibrary.Message.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 2 ' DB Library
]	protected [=$JavaPackageName].[=$SourceLibrary.Name].[=$SourceLibrary.Type]	var[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 3 ' Text Library
]	protected [=$JavaPackageName].[=$SourceLibrary.Name].[=$SourceLibrary.Type]	var[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 4	' Parameter Library
]	protected [=$SourceLibrary.DataType] var[=$SourceLibrary.Name];
[	endif
next 'SourceLibrary
if $AlgorithmGroup.TargetParentContext.Kind = 2	' DB Library
]	protected [=$JavaPackageName].[=$AlgorithmGroup.TargetParentContext.LibraryName].[=$AlgorithmGroup.TargetParentContext.Library.Type] varTargetDatabase;
[endif
]	// members
[foreach $Algorithm in $AlgorithmGroup.FlatMemberVariables
	if $Algorithm.Type = 8	' loop
]	protected [write QualifiedTypeName($Algorithm.SourceParentContext)]	var[=$Algorithm.Name];
[	else : if $Algorithm.IsComplex
		if $Algorithm.DataTypeNr = 48  ' anyType
	]	protected com.altova.xml.AnyTypeNode	var[=$Algorithm.VarID];
[		else
	]	protected [write QualifiedTypeName($Algorithm.SourceContext)]	var[=$Algorithm.VarID];
[		endif
	else
]	protected [=$Algorithm.DataType]	var[=$Algorithm.VarID];
[	endif : endif
next
if $AlgorithmGroup.TargetLibrary.Kind = 4 ' Parameter library
]	protected [=$AlgorithmGroup.TargetLibrary.DataType]	var[=$AlgorithmGroup.TargetLibrary.Name]TargetParameter; 
[endif

call DeclareRun()
]
		// Open the source(s)
[$Args = ""
$gFirstSourceInstance = ""
call OpenSourceLibraries( $Args, $gFirstSourceInstance )

]		// Create the target
[
$Indent = "		"
$gTargetInstance = ""
call OpenTargetLibrary( $Args, $Indent, $gTargetInstance )

]
[=$Indent]// Execute mapping
[
call ExecuteMapping( $Args, $Indent, $gFirstSourceInstance, $gTargetInstance )

]
		// Close the target
[
call FinalizeTargetLibrary()
]	}


[
foreach $Algorithm in $AlgorithmGroup.FlatSubAlgorithms 
	if $Algorithm.Type <> 11 and $Algorithm.Type <> 5	' Assignment, Variable
	'and not ($Algorithm.Type = 8 and $Algorithm.IsDocSwitchLoop) ' not an assignment and not a DocSwitch-loop
	
		' initialize local variables
		$Args				= ""
		$gSourceParameter	= ""
		$gTargetParameter	= ""
		$gIsFirstListLoop	= true
		$gIsDBLoop 			= false
		$ExceptionTargetType = ""
		$ExceptionTarget = ""

		call CalculateArguments( $Args, $Algorithm, $gSourceParameter, $gTargetParameter )
]
	protected void [=$Algorithm.Name]([=$Args]) throws Exception {
[		$Indent = "		"
]		// [=$Algorithm.Name] which is of type [=$Algorithm.Type] 
[
		' ---------- initialisation ----------
		if $Algorithm.Type = 6 ' sourcedata
			call ExecuteSourceData( $Indent, $Algorithm, $gSourceParameter )
		else : if $Algorithm.Type = 8 ' loop
			call ExecuteBeginLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
		else : if $Algorithm.Type = 17 ' distribute
			call ExecuteBeginDistribute( $Indent, $Algorithm, $gSourceParameter )
		else : if $Algorithm.Type = 10 ' create
			call ExecuteBeginCreate( $Indent, $Algorithm )
		else : if $Algorithm.Type = 18 ' exception
			call ExecuteInstantiateNewTarget( $Indent, $Algorithm, $ExceptionTarget, $ExceptionTargetType )
		endif : endif : endif : endif : endif

		' ---------- apply sub-algorithms ----------
		$gIsFirstListLoop = true
		foreach $SubAlgorithm in $Algorithm.SubAlgorithms
			if $SubAlgorithm.Type = 11 ' assignment
				call ExecuteAssignment( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 5 ' variable
				call ExecuteVariable( $Indent, $SubAlgorithm, $gTargetParameter )
			else : if $SubAlgorithm.Type = 9 ' filter
				call ExecuteFilter( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 16	' exists-return
				call ExecuteIfExistsReturn( $Indent, $SubAlgorithm)
			else : if $Algorithm.Type = 17 and $SubAlgorithm.Type = 8
				call ExecuteDistLoop( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
			else : if $SubAlgorithm.Type = 8 and $SubAlgorithm.HasCreateChild_TargetTableLoop and $gIsFirstListLoop ' loop
				call ExecuteSubLoop( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
			else : if $SubAlgorithm.Type = 10 and $SubAlgorithm.IsTable and $gIsFirstListLoop ' create
				call ExecuteSubCreate( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
			else
][=$Indent][=$SubAlgorithm.Name]( [if $gSourceParameter <> ""][=$gSourceParameter], [endif ][=$gTargetParameter] );
[			endif : endif : endif : endif : endif : endif : endif
		next

		' ---------- finalisation ----------
		if $Algorithm.Type = 8 'and not $Algorithm.IsParentLoop and not $Algorithm.IsDocSwitchLoop ' loop
			call ExecuteEndLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
		else : if $Algorithm.Type = 17 ' distribute
			call ExecuteEndDistribute( $Indent, $Algorithm, $gTargetParameter )
		else : if $Algorithm.Type = 10 ' create
			call ExecuteEndCreate( $Indent, $Algorithm, $gTargetParameter, $gIsFirstListLoop )
		else : if $Algorithm.Type = 18 ' create exception
			if $ExceptionTargetType = "SchemaString"
				][=$Indent]throw new com.altova.UserException([=$ExceptionTarget].getValue());
[			else
				][=$Indent]throw new com.altova.UserException([=$ExceptionTarget], "[=$ExceptionTargetType]");
[		endif : endif : endif : endif : endif
]	}
[	endif
next


' entry point for loca-functions
if $AlgorithmGroup.IsLocalFunction
	$gArgs = ""
	$gIsFirst = true
	foreach $gSourceLibrary in $AlgorithmGroup.SourceLibraryList : if $gSourceLibrary.Kind = 4
		if not $gIsFirst : $gArgs = $gArgs & ", " : endif
		$gArgs = $gArgs & "SchemaType " & $gSourceLibrary.UniqueName & "SourceParameter"
		$gIsFirst = false
	endif : next
]


	// global static function
	public static [=$AlgorithmGroup.TargetContext.Library.DataType] [=$AlgorithmGroup.Name]( [=$gArgs] ) 
		throws Exception {
		[=$classname]	function = new [=$classname]();
		[=$AlgorithmGroup.TargetContext.Library.DataType]	result = new [=$AlgorithmGroup.TargetContext.Library.DataType]();
[	$gArgs = ""
	$gIsFirst = true
]
		function.run( 
			[
	foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
		if not $gIsFirst ], 
			[
		endif

		if $SourceLibrary.Kind = 1 ' XML Library
			]"[=$SourceLibrary.InputInstanceName]"[
		endif
		if $SourceLibrary.Kind = 2 ' Database Library
			]java.sql.DriverManager.getConnection(
							"[=$SourceLibrary.JDBCURL]",
							"[=$SourceLibrary.DBUser]",
							"[=$SourceLibrary.DBPassword]")[
		endif
		if $SourceLibrary.Kind = 3 ' Text Parser Library
			]"[=$SourceLibrary.InputFileName]"[
		endif
		if $SourceLibrary.Kind = 4	' Parameter Library
			]new [=$SourceLibrary.DataType]( [=$SourceLibrary.UniqueName]SourceParameter )[
		endif

		$gIsFirst = false
	next

	if not $gIsFirst
		], 
			[
	endif
	]result );

		return result;
	}

[endif


]}

[
' EOF
]