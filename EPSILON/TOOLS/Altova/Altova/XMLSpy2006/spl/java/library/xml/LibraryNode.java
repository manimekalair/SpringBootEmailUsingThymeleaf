/**
 * [=$class.Name].java
 *
 * This file was generated by [=$Host].
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the [=$HostShort] Documentation for further details.
 * [=$HostURL]
 */


[if $class.IsComplexType
]package [=$FullPackageName];

import com.altova.types.*;

[	$BaseIsComplex  = $class.HasBaseObject and $class.BaseObject.IsComplexType
	if $BaseIsComplex
		if $class.NamespacePrefix <> $class.BaseObject.NamespacePrefix
			$QualifiedBase = $LibraryPackageName & "." & $class.BaseObject.NamespacePrefix & "." & $class.Base
		else
			$QualifiedBase = $class.Base
		endif
	else
		$QualifiedBase = "com.altova.xml.Node"
	endif
]public class [=$class.Name] extends [=$QualifiedBase] {
[if $CompatibilityMode <= "2005"]
	public [=$class.Name]() {
		super();
	}
[endif]
	public [=$class.Name]([=$class.Name] node) {
		super(node);
	}

	public [=$class.Name](org.w3c.dom.Node node) {
		super(node);
	}

	public [=$class.Name](org.w3c.dom.Document doc) {
		super(doc);
	}

	public [=$class.Name](com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
[	if $class.IsComplexFromSimpleType or $class.IsMixed
		if $class.HasSimpleBaseObject
			if $class.NamespacePrefix <> $class.SimpleBaseObject.NamespacePrefix
				$QualifiedValueType = $LibraryPackageName & "." & $class.SimpleBaseObject.NamespacePrefix & "." & $class.SimpleBaseObject.Name
			else
				$QualifiedValueType = $class.SimpleBaseObject.Name
			endif
		else
			if $class.IsMixed
				$QualifiedValueType = "SchemaString"
			else
				$QualifiedValueType = $class.BuiltInBase
			endif
		endif
]
	public [=$QualifiedValueType] getValue() {
		return new [=$QualifiedValueType](getDomNodeValue(dereference(domNode)));
	}

	public void setValue(SchemaType value) {
		setDomNodeValue(domNode, value.toString());
	}

	public void assign(SchemaType value) {
		setValue(value);
	}

[	endif

]	public void adjustPrefix() {
[	foreach $member in $class.Members
		if $member.IsQualified
			$IsQualified = "true"
		else
			$IsQualified = "false"
		endif

		if $member.HasTypeObject and $member.TypeObject.NamespacePrefix <> $class.NamespacePrefix
			if $member.TypeObject.NamespacePrefix <> ""
				$QualifiedType = $LibraryPackageName & "." & $member.TypeObject.NamespacePrefix & "." & $member.Type
			else
				$QualifiedType = $LibraryPackageName & "." & $member.Type
			endif
		else
			$QualifiedType = $member.Type
		endif

		if $member.NamespaceURI = ""
			$MemberNamespaceURI = "null"
		else
			$MemberNamespaceURI = "\"" & $member.NamespaceURIJava & "\""
		endif
]		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( [=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]" );
				tmpNode != null;
				tmpNode = getDomNextChild( [=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, [=$IsQualified]);
[		if $member.HasTypeObject and $member.TypeObject.IsComplexType
]			new [=$QualifiedType](tmpNode).adjustPrefix();
[		endif
]		}
[	next
	if $BaseIsComplex]
		super.adjustPrefix();
[	endif
]	}
[	foreach $member in $class.Members
		if $member.HasTypeObject
			if $member.TypeObject.NamespacePrefix <> $class.NamespacePrefix
				if $member.TypeObject.NamespacePrefix <> ""
					$QualifiedType = $LibraryPackageName & "." & $member.TypeObject.NamespacePrefix & "." & $member.Type
				else
					$QualifiedType = $LibraryPackageName & "." & $member.Type
				endif
			else
				$QualifiedType = $member.Type
			endif
		else
			$QualifiedType = $member.Type
		endif

		if $member.NamespaceURI = ""
			$MemberNamespaceURI = "null"
		else
			$MemberNamespaceURI = "\"" & $member.NamespaceURIJava & "\""
		endif
]
	public static int get[=$member.Name]MinCount() {
		return [=$member.MinOcc];
	}

	public static int get[=$member.Name]MaxCount() {
		return [if $member.MaxOcc = -1]Integer.MAX_VALUE[else][=$member.MaxOcc][endif];
	}
[ if  $class.IsSOAPArray 
	$lName ="null"
else
	$lName = "\"" & $member.SchemaNameJava &"\""
endif]
	public int get[=$member.Name]Count() {
		return getDomChildCount([=$member.NodeType], [=$MemberNamespaceURI], [=$lName]);
	}

	public boolean has[=$member.Name]() {
		return hasDomChild([=$member.NodeType], [=$MemberNamespaceURI], [=$lName]);
	}

	public [=$QualifiedType] new[=$member.Name]() {
		return new [=$QualifiedType]([if not $member.IsSimpleType
]domNode.getOwnerDocument().createElementNS([=$MemberNamespaceURI], "[=$member.SchemaNameJava]")[endif]);
	}

	public [=$QualifiedType] get[=$member.Name]At(int index) throws Exception {
[		if $member.IsSimpleType
]		return new [=$QualifiedType](getDomNodeValue(dereference(getDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], [=$lName], index))));
[		else
]		return new [=$QualifiedType](dereference(getDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], [=$lName], index)));
[		endif
]	}

	public org.w3c.dom.Node getStarting[=$member.Name]Cursor() throws Exception {
		return getDomFirstChild([=$member.NodeType], [=$MemberNamespaceURI], [=$lName] );
	}

	public org.w3c.dom.Node getAdvanced[=$member.Name]Cursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( [=$member.NodeType], [=$MemberNamespaceURI], [=$lName], curNode );
	}

	public [=$QualifiedType] get[=$member.Name]ValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
[			if $member.IsSimpleType
]			return new [=$QualifiedType](getDomNodeValue( dereference(curNode) ) );
[			else
]			return new [=$QualifiedType]( dereference(curNode) );
[			endif
]	}

	public [=$QualifiedType] get[=$member.Name]() throws Exception 
 {
		return get[=$member.Name]At(0);
	}

	public void remove[=$member.Name]At(int index) {
		removeDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], [=$lName], index);
	}

	public void remove[=$member.Name]() {
[		if $member.MaxOcc > 1
]		remove[=$member.Name]At(0);
[		else
]		while (has[=$member.Name]())
			remove[=$member.Name]At(0);
[		endif
]	}

[		if $member.IsSimpleType
]	public void add[=$member.Name]([=$QualifiedType] value) {
		if( value.isNull() == false )
		{
[		if $IsWSDLAndUsesRpcEncoding = 1
]			org.w3c.dom.Node n = appendDomChild([=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", value.toString());
			org.w3c.dom.Element el = (org.w3c.dom.Element)n;
			// TODO fix namespace for nonbuiltin types
			el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "xsd:[=$member.SchemaType]");[
		else
]			appendDomChild([=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", value.toString());[
		endif]
		}
	}

	public void add[=$member.Name](String value) throws Exception {
		add[=$member.Name](new [=$QualifiedType](value));
	}

	public void insert[=$member.Name]At([=$QualifiedType] value, int index) {
[	if $IsWSDLAndUsesRpcEncoding = 1
]		org.w3c.dom.Node n = insertDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value.toString());
		org.w3c.dom.Element el = (org.w3c.dom.Element)n;
		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "xsd:[=$member.SchemaType]");[
	else
]		insertDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value.toString());[
	endif]
	}

	public void insert[=$member.Name]At(String value, int index) throws Exception {
		insert[=$member.Name]At(new [=$QualifiedType](value), index);
	}

	public void replace[=$member.Name]At([=$QualifiedType] value, int index) {
		replaceDomChildAt([=$member.NodeType], [=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value.toString());
	}

	public void replace[=$member.Name]At(String value, int index) throws Exception {
		replace[=$member.Name]At(new [=$QualifiedType](value), index);
	}
[		else
]	public void add[=$member.Name]([=$QualifiedType] value) {
[	if $IsWSDLAndUsesRpcEncoding = 1
] 		org.w3c.dom.Element el = (org.w3c.dom.Element)appendDomElement([=$MemberNamespaceURI], "[=$member.SchemaNameJava]", value);
[	  if $member.TypeObject.IsSOAPArray
]		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "soapenc:Array");
		el.setAttributeNS("http://schemas.xmlsoap.org/soap/encoding/" , "soapenc:arrayType", "[=$member.TypeObject.SOAPArrayType]");
[	  else		
		$lSchemaTypeNSPrefix = $member.TypeObject.Namespace.Prefix
		$lSchemaTypeNSURI = $member.TypeObject.Namespace.URI
	   if $lSchemaTypeNSPrefix = "" or $lSchemaTypeNSURI = ""
]		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "[=$member.SchemaType]");[
	   else
]		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "[=$lSchemaTypeNSPrefix]:[=$member.SchemaType]");[
	   endif
	  endif
	else
]		appendDomElement([=$MemberNamespaceURI], "[=$member.SchemaNameJava]", value);[
	endif]	
	}

	public void insert[=$member.Name]At([=$QualifiedType] value, int index) {
[	if $IsWSDLAndUsesRpcEncoding = 1
] 		org.w3c.dom.Element el = (org.w3c.dom.Element)insertDomElementAt([=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value);
[	  if $member.TypeObject.IsSOAPArray
]		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "soapenc:Array");
		el.setAttributeNS("http://schemas.xmlsoap.org/soap/encoding/" , "soapenc:arrayType", "[=$member.TypeObject.SOAPArrayType]");
[	  else		
		$lSchemaTypeNSPrefix = $member.TypeObject.Namespace.Prefix
		$lSchemaTypeNSURI = $member.TypeObject.Namespace.URI
]		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance" , "xsi:type", "[=$lSchemaTypeNSPrefix]:[=$member.SchemaType]");[
	  endif
	else
]		insertDomElementAt([=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value);[
	endif]
	}

	public void replace[=$member.Name]At([=$QualifiedType] value, int index) {
		replaceDomElementAt([=$MemberNamespaceURI], "[=$member.SchemaNameJava]", index, value);
	}
[		endif
	next
if $class.IsMixed
]	public void addTextNode(String value) throws Exception {
		appendDomChild(Text, null, null, value.toString());
	}
	public void addComment(String value) throws Exception {
			appendDomChild(Comment, null, null, value.toString());
		}
	public void addCDataNode(String value) throws Exception {
			appendDomChild(CData, null, null, value.toString());
		}
	public void addProcessingInstruction(String name, String value) throws Exception {
			appendDomChild(ProcessingInstruction, null, name.toString(), value.toString());
		}
[endif]
	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
[	if $IsWSDLAndUsesRpcEncoding = 1
]		String href = ((org.w3c.dom.Element)node).getAttribute("href");
		if (href != null && href.length()  != 0) 	{
			org.w3c.dom.NodeList nl = node.getOwnerDocument().getElementsByTagName("refNode_"+href.substring(1));
			if (nl.getLength() == 1 && nl.item(0).getFirstChild() != null  )
				return nl.item(0).getFirstChild();
		}
[	endif
]		return node;
	}
}
[else
	if $class.IsSimpleType and not $class.IsInternal
		$QualifiedBase = $class.Base
		if $class.Base = $class.BuiltInBase
			$IsDirectChild = true
		else
			$IsDirectChild = false
			if $class.HasBaseObject and $class.NamespacePrefix <> $class.BaseObject.NamespacePrefix
				$QualifiedBase = $LibraryPackageName & "." & $class.BaseObject.NamespacePrefix & "." & $class.Base
			endif
		endif
]package [=$FullPackageName];

import com.altova.types.*;

public class [=$class.Name] extends [=$QualifiedBase] {
[		foreach $facet in $class.Facets
			if $facet.IsEnumeration
				foreach $enum in $facet.Enumeration
]	public static final int [=$enum.Name] = [=$enum.Index]; /* [=$enum.Value] */
[				next]
	public static String\[\] sEnumValues = {
[		foreach $enum in $facet.Enumeration
]		"[=$enum.ValueJava]",
[		next
]	};
[			else : if $facet.IsPattern
]	public static String\[\] sPatternValues = {
[		foreach $pattern in $facet.Pattern
]		"[=$pattern.ValueJava]",
[		next
]	};
[			endif : endif
		next]
	public [=$class.Name]() {
		super();
	}

	public [=$class.Name](String newValue) {
		super(newValue);
		validate();
	}

	public [=$class.Name]([=$class.BuiltInBase] newValue) {
		super(newValue);
		validate();
	}

[		foreach $facet in $class.Facets
			if $facet.IsEnumeration
]	public static int getEnumerationCount() {
		return sEnumValues.length;
	}

	public static String getEnumerationValue(int index) {
		return sEnumValues\[index\];
	}

	public static boolean isValidEnumerationValue(String val) {
		for (int i = 0; i < sEnumValues.length; i++) {
			if (val.equals(sEnumValues\[i\]))
				return true;
		}
		return false;
	}

[			else : if $facet.IsPattern
]	public static int getPatternCount() {
		return sPatternValues.length;
	}

	public static String getPatternValue(int index) {
		return sPatternValues\[index\];
	}

[			endif : endif
		next
]	public void validate() {
[
		foreach $facet in $class.Facets
			if $facet.IsMinLength
]		if (value != null && length() < getMinLength())
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is too short.");
[			else:if $facet.IsMaxLength
]		if (value != null && length() > getMaxLength())
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is too long.");
[			else:if $facet.IsLength]
		if (value != null && length() != getRequiredLength())
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is not of the required length.");
[			else:if $facet.IsMinInclusive]
		if (compareTo(getMinInclusive()) < 0)
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is out of range.");
[			else:if $facet.IsMinExclusive]
		if (compareTo(getMinExclusive()) <= 0)
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is out of range.");
[			else:if $facet.IsMaxExclusive]
		if (compareTo(getMaxExclusive()) >= 0)
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is out of range.");
[			else:if $facet.IsMaxInclusive]
		if (compareTo(getMaxInclusive()) > 0)
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is out of range.");
[			else:if $facet.IsEnumeration]
		if (!isValidEnumerationValue(toString()))
			throw new com.altova.xml.XmlException("Value of [=$class.SchemaName] is invalid.");
[			endif:endif:endif:endif:endif:endif:endif:endif
		next
]	}
[
		foreach $facet in $class.Facets
			if $facet.IsMinLength
]	public int getMinLength() {
		return [=$facet.Constraint];
	}
[			else:if $facet.IsMaxLength
]	public int getMaxLength() {
		return [=$facet.Constraint];
	}
[			else:if $facet.IsLength
]	public int getRequiredLength() {
		return [=$facet.Constraint];
	}
[			else:if $facet.IsMinInclusive
]	public [=$class.BuiltInBase] getMinInclusive() {
		return new [=$class.BuiltInBase]("[=$facet.Constraint]");
	}
[			else:if $facet.IsMinExclusive
]	public [=$class.BuiltInBase] getMinExclusive() {
		return new [=$class.BuiltInBase]("[=$facet.Constraint]");
	}
[			else:if $facet.IsMaxExclusive
]	public [=$class.BuiltInBase] getMaxExclusive() {
		return new [=$class.BuiltInBase]("[=$facet.Constraint]");
	}
[			else:if $facet.IsMaxInclusive
]	public [=$class.BuiltInBase] getMaxInclusive() {
		return new [=$class.BuiltInBase]("[=$facet.Constraint]");
	}
[			endif:endif:endif:endif:endif:endif:endif
		next
]}
[	endif
endif
]