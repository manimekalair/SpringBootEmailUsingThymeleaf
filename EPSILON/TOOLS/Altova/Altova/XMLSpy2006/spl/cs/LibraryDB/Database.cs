//
// [=$module]Database.cs
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//

using System;
using System.Collections;
using System.Data;
using [=$library.DotNetNamespace];
using Altova.Db;

namespace [=$module]
{
	public class [=$library.Type] : Altova.Db.Database 
	{

		#region Construction
		public [=$library.Type](string connection) 
			: base(connection)	
		{
			try
			{
				ConnectionForModify.Open();
[if $library.OnOpenExecuteSQL <> ""
]				// database connection initialisation
				ExecuteCommand( "[=$library.OnOpenExecuteSQL]" );
[endif
if $library.IsUseTransaction 
]				// transaction handling
				InternalBeginTransaction();
				transactionCount++;
[endif
]			}
			catch( Exception e )
			{
				throw new DBConnectionException( DBConnectionException.EErrorKind.Init, connection, e.Message );
			}
		}
		#endregion Construction

		#region Operations
		public void Close()
		{
			try
			{
[	if $library.IsUseTransaction
]				// transaction handling
				if( !rollbackTransaction )
					InternalCommitTransaction();
				else
					InternalRollbackTransaction();
				transactionCount--;
[	endif
	if $library.OnCloseExecuteSQL <> ""
]				// database connection finalisation
				ExecuteCommand( "[=$library.OnCloseExecuteSQL]" );
[	endif
]				ConnectionForModify.Close();
			}
			catch( Exception e )
			{
				throw new DBConnectionException( DBConnectionException.EErrorKind.Finalize, connectionString, e.Message );
			}
		}
		#endregion Operations

		#region Overridables
		public override IDbConnection CreateConnection()
		{
			return new [=$library.DotNetConnectionType]( connectionString );
		}

		protected override void	InternalBeginTransaction()
		{
			try
			{
[	if not $library.IsMainTransactionViaSQL
]				transaction = ConnectionForModify.BeginTransaction();
[	else : if $library.SQLBeginTransaction <> ""
]				ExecuteCommand( "[=$library.SQLBeginTransaction]" );
[	endif : endif
]			}
			catch( Exception e )
			{
				throw new DBExecuteException( DBExecuteException.EErrorKind.Execute, "begin transaction", e.Message );
			}
		}

		protected override void	InternalCommitTransaction()
		{
			try
			{
[	if not $library.IsMainTransactionViaSQL
]				transaction.Commit();
[	else : if $library.SQLCommitTransaction <> ""
]				ExecuteCommand( "[=$library.SQLCommitTransaction]" );
[	endif : endif
]			}
			catch( Exception e )
			{
				throw new DBExecuteException( DBExecuteException.EErrorKind.Execute, "commit transaction", e.Message );
			}
		}

		protected override void	InternalRollbackTransaction()
		{
			try
			{
[	if not $library.IsMainTransactionViaSQL
]				transaction.Rollback();
[	else : if $library.SQLRollbackTransaction <> ""
]				ExecuteCommand( "[=$library.SQLRollbackTransaction]" );
[	endif : endif
]			}
			catch( Exception e )
			{
				throw new DBExecuteException( DBExecuteException.EErrorKind.Execute, "rollback transaction", e.Message );
			}
		}

		protected override void	InternalSetSavepoint( string sTransactionName )
		{
[	if $library.SQLSetSavepoint <> "" 
]			string sStatement = "[=$library.SQLSetSavepoint]";
			sStatement = sStatement.Replace( " %%TRANSACTION_NAME%% ", sTransactionName );
			try
			{
				ExecuteCommand( sStatement );
			}
			catch( Exception e )
			{
				throw new DBExecuteException( DBExecuteException.EErrorKind.Execute, sStatement, e.Message );
			}
[	endif
]		}

		protected override void	InternalRollbackToSavepoint( string sTransactionName )
		{
[	if $library.SQLRollbackToSavepoint <> "" 
]			string sStatement = "[=$library.SQLRollbackToSavepoint]";
			sStatement = sStatement.Replace( " %%TRANSACTION_NAME%% ", sTransactionName );
			try
			{
				ExecuteCommand( sStatement );
			}
			catch( Exception e )
			{
				throw new DBExecuteException( DBExecuteException.EErrorKind.Execute, sStatement, e.Message );
			}
[	endif
]		}
		#endregion Overridables

		#region Queries
[foreach $table in $library.Tables]
		public [=$table.Name]Set Get[=$table.Name]Table() 
		{
			[=$table.Name]Set	result = new [=$table.Name]Set(this);
			ArrayList cmdList = new ArrayList(1);
			cmdList.Add( new Command( "SELECT * FROM [=$table.DBLongEscapedName]", false ) );
			result.Execute( cmdList );
			return result;
		}

		public [=$table.Name]Set Get[=$table.Name]Table(string param)
		{
			[=$table.Name]Set	result = new [=$table.Name]Set(this);
			ArrayList cmdList = new ArrayList(1);
			cmdList.Add( new Command( "SELECT * FROM [=$table.DBLongEscapedName] WHERE " + param, false ) );
			result.Execute( cmdList );
			return result;
		}
[next
]		#endregion Queries
	}
}
