[
sub GenerateFileHeader(byval $lFileName)
]////////////////////////////////////////////////////////////////////////
//
// [=$lFileName]
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////
[
endsub


sub GenerateJavaNodePropertySetter(byref $rNode)
	switch ($rNode.Class)
	case 1:
		$classstring = "ITextNode.DataElement"
	case 2:
		$classstring = "ITextNode.Composite"
	case 3:
		$classstring = "ITextNode.Segment"
	default:
		$classstring = "ITextNode.Group"		
	endswitch
	if $rNode.ValueType = "SchemaDecimal"
		$isdecimalstring= "true"
	else
		$isdecimalstring= "false"
	endif
	write "\t\tm_Node.setNodeClass(" & $classstring & ");\n"
	write "\t\tm_Node.setHasDecimalData(" & $isdecimalstring & ");\n"
	write "\t\tm_Node.setMaximumLength(" & $rNode.MaximumLength & ");\n"
	write "\t\tm_Node.setNativeName(\"" & $rNode.NativeName & "\");\n"
endsub


sub GenerateCSharpNodePropertySetter(byref $rNode)
	switch ($rNode.Class)
	case 1:
		$classstring = "NodeClass.DataElement"
	case 2:
		$classstring = "NodeClass.Composite"
	case 3:
		$classstring = "NodeClass.Segment"
	default:
		$classstring = "NodeClass.Group"		
	endswitch
	if $rNode.ValueType = "SchemaDecimal"
		$isdecimalstring= "true"
	else
		$isdecimalstring= "false"
	endif

	write "\t\t\tNode.Class = " & $classstring & ";\n"
	write "\t\t\tNode.HasDecimalData = " & $isdecimalstring & ";\n"
	write "\t\t\tNode.MaximumLength = " & $rNode.MaximumLength & ";\n"
	write "\t\t\tNode.NativeName = \"" & $rNode.NativeName & "\";\n"
endsub

sub GenerateCppNodePropertySetter(byref $rNode)
	switch ($rNode.Class)
	case 1:
		$classstring = "DataElement"
	case 2:
		$classstring = "Composite"
	case 3:
		$classstring = "Segment"
	default:
		$classstring = "Group"		
	endswitch
	if $rNode.ValueType = "CSchemaDecimal"
		$isdecimalstring= "true"
	else
		$isdecimalstring= "false"
	endif
	write "\tGetNode().SetClass(" & $classstring & ");\n"
	write "\tGetNode().SetHasDecimalData(" & $isdecimalstring & ");\n"
	write "\tGetNode().SetMaximumLength(" & $rNode.MaximumLength & ");\n"
	write "\tGetNode().SetNativeName(_T(\"" & $rNode.NativeName & "\"));\n"
endsub

sub GenerateHandlerInitializer(byval $rIndex)
	write "void " & $module & "Document::InitHandlers" & $rIndex & "()\n"
	write "{\n"
	write "\tCStringToFunctionMap& handlers= CTextDocument::GetHandlers();\n"
	$lStartIndex= 500*$rIndex
	foreach $handler in $library.Handlers
		if ($handler.Index>=$lStartIndex and $handler.Index<$lStartIndex+500)
			write "\thandlers.Add( _T(\"" & $handler.Name & "\"), new CHandler" & $handler.Name & "()); // " & $handler.Index & "\n"
		endif
	next
	write "}\n"
endsub

sub GenerateFunctionInitializer(byval $rIndex)
	write "void " & $module & "Document::InitFunctions" & $rIndex & "()\n"
	write "{\n"
	write "\tCStringToFunctionMap& functions= CTextDocument::GetFunctions();\n"
	$lStartIndex= 500*$rIndex
	foreach $function in $library.Functions
		if ($function.Index>=$lStartIndex and $function.Index<$lStartIndex+500)
			write "\tfunctions.Add( _T(\"" & $function.Name & "\"), new CFunction" & $function.Name & "()); // " & $function.Index & "\n"
		endif
	next
	write "}\n"
endsub

sub NodeContainedInLibraryNodes(byval $rNode, byref $rResult)
	$rResult = 0
	foreach $lLibraryNode in $library.Nodes
		if $lLibraryNode.UserFriendlyName = $rNode.UserFriendlyName
			$rResult= 1
			'break;
		endif
	next
endsub
]
