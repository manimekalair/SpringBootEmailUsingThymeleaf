/**
 * [=$table.Name]Set.java
 *
 * This file was generated by [=$Host].
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the [=$HostShort] Documentation for further details.
 * [=$HostURL]
 */


package [=$FullPackageName];

import com.altova.types.*;
import com.altova.db.*;


public class [=$table.Name]Set extends com.altova.db.RecordSet {

	// Members
[foreach $column in $table.Columns
]	protected [=$column.Type] m[=$column.Name];
[next
]
	// Construction
	public [=$table.Name]Set(java.sql.Connection connection) {
		super( connection, true );
		prepare( true );
	}

	public [=$table.Name]Set(java.sql.Connection connection, Command command)  throws java.sql.SQLException {
		super( connection, true );
		prepare( true );
		this.commands.addElement( command );
		execute( null );
	}

	// Accessors
[foreach $column in $table.Columns]
	public [=$column.Type] get[=$column.Name]() throws java.sql.SQLException {
		if( m[=$column.Name] == null ) {
			[=$column.Type] result = new [=$column.Type]();
			result.setNull();
			return result;
		}
		return new [=$column.Type]( m[=$column.Name] );
	}

	public void set[=$column.Name]( [=$column.Type] newvalue ) {
		m[=$column.Name] = new [=$column.Type]( newvalue );
	}
[next
]

	// Operations
	public boolean empty() {
[foreach $column in $table.Columns
]		m[=$column.Name] = new [=$column.Type]();	// create empty value
[next]
		return false;
	}

	public void prepare( boolean bIsReadOnlyAccess ) {
		isReadAccess = bIsReadOnlyAccess;
	}

	public SchemaType getValueByName( String column ) {
[foreach $column in $table.Columns
]		if( column.equals("[=$column.DBName]") )
			return m[=$column.Name];
[next
]		return null;
	}

	public boolean next( boolean bClearIfEmpty ) throws java.sql.SQLException {
		if( !hasResultSet() ) 
			return ( bClearIfEmpty ? empty() : false );
		if( !resultSet.next() ) {
			if( isReadAccess )
				clearResultSet();
			return ( bClearIfEmpty ? empty() : false );
		}
		if( !isReadAccess )	{
			try { mapforceDelRows = new SchemaInt( resultSet, "MAPFORCE_DEL_ROWS" ); }
				catch( java.sql.SQLException e ) { }
		}

[foreach $column in $table.Columns
]		try { m[=$column.Name] = new [=$column.Type]( resultSet, "[=$column.DBName]" );	}
			catch( NullPointerException e ) { m[=$column.Name] = new [=$column.Type](); m[=$column.Name].setNull(); }
			catch( java.sql.SQLException e ) {}
[next]
		return true;
	}

}
