//
// [=$module]Functions.cpp
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//

using System;
using System.Collections;
using Altova.Types;
using Altova.TextParser;
using Altova.TextParser.EDIFACT;


namespace [=$module]
{

[foreach $handler in $library.Handlers
]	public class Handler[=$handler.Name] : BaseFunction 
	{
		public Handler[=$handler.Name]()
		{
[		' iterate the function commands
		foreach $command in $handler.Commands
			' create the command class name
			$CommandClassName = "Command" & $command.CommandName
			' --- HasConditions ---
			' check if there are attached conditions
			if $command.HasConditions
]			{
[				' create the command instance
]				[=$CommandClassName] command = new [=$CommandClassName]([if $command.HasParameter]"[=$command.Parameter]"[endif][if $command.CommandName = "Enter"], NodeClass.[=$command.ClassName][endif]);
[				'
				' set the condition's operation (default is 'or')
				if $command.Operation = 1
]				command.Conditions.Operator = ConditionChain.BooleanOperator.And;
[				endif 'command.Operation
				'
				' iterate the conditions
				foreach $condition in $command.Conditions
					' create the condition class name
					$ConditionClassName = "Condition" & $condition.ConditionName
					' append the condition to the commands condition list
]				command.AddCondition( new [=$ConditionClassName]([if $condition.HasParameter]"[=$condition.Parameter]"[endif][if $condition.Negate], true[endif]) );
[				next ' condition
				' --- Otherwise ---
				' when the condition fails the following commands are executed
				if $command.HasOtherwise
					' iterate the otherwise command container
					foreach $otherwise in $command.Otherwise
						' create the command class name
						$OtherwiseClassName = "Command" & $otherwise.CommandName
						' append the new command to the otherwise command list of the current command
						' restriction: currently the otherwise commands cannot have conditions
]				command.AddOtherwise( new [=$OtherwiseClassName]([if $otherwise.HasParameter]"[=$otherwise.Parameter]"[endif][if $otherwise.CommandName = "Enter"], [=$otherwise.ClassName][endif]) );
[					next ' otherwise
				endif 'command.HasOtherwise
				' append the newly created command
]				AddCommand( command );
			}
[			else ' command.HasConditions
]			AddCommand( new [=$CommandClassName]([if $command.HasParameter]"[=$command.Parameter]"[endif][if $command.CommandName = "Enter"], NodeClass.[=$command.ClassName][endif]) );
[			endif
][		next ' command
]
		}
	};

[next
]

	//////////////////////////////////////////////////////////////////////////

[foreach $function in $library.Functions
]	public class Function[=$function.Name] : BaseFunction 
	{
		public Function[=$function.Name]()
		{
[		' iterate the function commands
		foreach $command in $function.Commands
			' create the command class name
			$CommandClassName = "Command" & $command.CommandName
			' --- HasConditions ---
			' check if there are attached conditions
			if $command.HasConditions
]			{
[				' create the command instance
]				[=$CommandClassName] command = new [=$CommandClassName]([if $command.HasParameter]"[=$command.Parameter]"[endif][if $command.CommandName = "Enter"], NodeClass.[=$command.ClassName][endif]);
[				if $command.Operation = 1
]				command.Conditions.Operator = ConditionChain.BooleanOperator.And;
[				endif
				'
				' iterate the attached conditions
				foreach $condition in $command.Conditions
					' create the condition class name
					$ConditionClassName = "Condition" & $condition.ConditionName
]				command.AddCondition( new [=$ConditionClassName]([if $condition.HasParameter]"[=$condition.Parameter]"[endif][if $condition.Negate], true[endif]) );
[				next' condition
				' --- Otherwise ---
				' when the condition fails the following commands are executed
				if $command.HasOtherwise
					' iterate the otherwise command container
					foreach $otherwise in $command.Otherwise
						' create the command class name
						$OtherwiseClassName = "Command" & $otherwise.CommandName
]				command.AddOtherwise( new [=$OtherwiseClassName]([if $otherwise.HasParameter]"[=$otherwise.Parameter]"[endif][if $otherwise.CommandName = "Enter"], [=$otherwise.ClassName][endif]) );
[					next ' otherwise
				endif ' command.HasOtherwise
				' append the newly created command
]				AddCommand( command );
			}
[			else ' command.HasConditions
			' create the command instance and append it to the functions command list
]			AddCommand( new [=$CommandClassName]([if $command.HasParameter]"[=$command.Parameter]"[endif][if $command.CommandName = "Enter"], NodeClass.[=$command.ClassName][endif]) );
[			endif ' command.HasConditions
][		next ' command
]
		}
	};

[next
]

} // namespace [=$module]

