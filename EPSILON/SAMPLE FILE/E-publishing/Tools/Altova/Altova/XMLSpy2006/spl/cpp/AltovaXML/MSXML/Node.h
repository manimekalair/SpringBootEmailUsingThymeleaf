////////////////////////////////////////////////////////////////////////
//
// Node.h
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////


#ifndef ALTOVA_NODE_H_INCLUDED
#define ALTOVA_NODE_H_INCLUDED

#if _MSC_VER > 1000
	#pragma once
#endif // _MSC_VER > 1000

#include "AltovaXMLAPI.h"

namespace altova {

class ALTOVAXML_DECLSPECIFIER CNode : public CBaseObject
{
public:
	typedef enum {
		Element,
		Attribute,
		Text,
		CData,
		Comment,
		ProcessingInstruction
	} ENodeType;

	typedef enum
	{
		eSequence,
		eAll,
		eChoice
	} EGroupType;

protected:
	CNode();
	CNode(CNode& rParentNode, MSXML2::IXMLDOMNodePtr spThisNode);
	CNode(MSXML2::IXMLDOMDocument2Ptr& rspDocument);

public:
	virtual ~CNode();
	CNode& operator=(const CNode& other);
	CNode& Assign(const CNode& other);

	tstring Transform(const tstring& sXSLTFilename);

	tstring GetNodeName() const;
	tstring GetNodeText() const;
	tstring ToXMLString() const;
	MSXML2::IXMLDOMNodePtr GetDOMNode();
	static void MapPrefix(const tstring& sPrefix, const tstring& sURI);
	static bool	NamesMatch(MSXML2::IXMLDOMNodePtr pNode, const tstring& sNamespaceURI, const tstring& sName);
	static tstring	GetNodeTextValue( MSXML2::IXMLDOMNodePtr );

protected:
	friend class CDoc;
	tstring InternalGetElementValue();
	void InternalSetElementValue(tstring sValue);
	void DeclareNamespace(tstring sPrefix, const tstring& sURI);
	bool CompareChildName(MSXML2::IXMLDOMNodePtr spChild, const tstring& sNamespaceURI, const tstring& sName);
	tstring AdjustQualifiedName(const tstring& sNamespaceURI, const tstring& sName);
	int ChildCountInternal(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	bool InternalHasChild(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	MSXML2::IXMLDOMNodePtr CreateNode(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	MSXML2::IXMLDOMNodePtr InternalAppend(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, const tstring& sValue);
	MSXML2::IXMLDOMNodePtr InternalAppendNode(const tstring& sNamespaceURI, const tstring& sElement, CNode& rNode, MSXML2::IXMLDOMNodePtr spHostNode = MSXML2::IXMLDOMNodePtr());
	MSXML2::IXMLDOMNodePtr InternalRemoveAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex);
	MSXML2::IXMLDOMNodePtr InternalInsertAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex, const tstring& sValue);
	MSXML2::IXMLDOMNodePtr InternalInsertNodeAt(const tstring& sNamespaceURI, const tstring& sName, int nIndex, CNode& rNode);
	MSXML2::IXMLDOMNodePtr InternalReplaceAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex, const tstring& sValue);
	MSXML2::IXMLDOMNodePtr InternalReplaceNodeAt(const tstring& sNamespaceURI, const tstring& sName, int nIndex, CNode& rNode);
	MSXML2::IXMLDOMNodePtr InternalGetAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex);
	MSXML2::IXMLDOMNodePtr InternalGetFirstChild(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	MSXML2::IXMLDOMNodePtr InternalGetNextChild(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, MSXML2::IXMLDOMNodePtr pCurNode );
	MSXML2::IXMLDOMNodePtr InternalSet(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, const tstring& sValue);
	static tstring LookupPrefix(MSXML2::IXMLDOMNodePtr spNode, const tstring& sURI);

	MSXML2::IXMLDOMDocument2Ptr	m_spDocument;
	MSXML2::IXMLDOMNodePtr		m_spNode;

	static tstring				sm_sTargetNamespacePrefix;
	static tstring				sm_sTargetNamespaceURI;
};


class CSchemaString;

class ALTOVAXML_DECLSPECIFIER CAnyTypeNode : public CNode
{
public:
	CAnyTypeNode() : CNode() {}
	CAnyTypeNode(CNode& rParentNode, MSXML2::IXMLDOMNodePtr spThisNode) : CNode(rParentNode, spThisNode) {}
	CAnyTypeNode(MSXML2::IXMLDOMDocument2Ptr spDoc) : CNode(spDoc) {}
	virtual ~CAnyTypeNode() {}

	CAnyTypeNode(const CSchemaString &Value);
	CAnyTypeNode& operator =(const CSchemaString& Value);
	void Assign(const CSchemaString& Value);
	virtual operator CSchemaString();
	static EGroupType GetGroupType();
	void AdjustPrefix();
	

	void AddTextNode(CSchemaString text);
	void AddCDataNode(CSchemaString text);
	void AddComment(CSchemaString text);
	void AddProcessingInstruction(CSchemaString name, CSchemaString text);
};
 
} // namespace altova

#endif // ALTOVA_NODE_H_INCLUDED
