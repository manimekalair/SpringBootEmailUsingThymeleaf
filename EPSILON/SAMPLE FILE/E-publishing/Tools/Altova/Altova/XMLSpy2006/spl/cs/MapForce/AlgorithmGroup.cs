////////////////////////////////////////////////////////////////////////
//
// [=$classfilename].cs
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Data;
using System.Xml;
using Altova.Types;
using Altova.Functions;
[if $DBLibraryCount > 0
]using Altova.Db;
[endif
][if $EDILibraryCount > 0
]using Altova.TextParser;
[endif]

[
foreach $tmplibrary in $application.Libraries
	if $tmplibrary.Kind <> 4	' Parameter Library
]using [=$tmplibrary.Name]; // application.libraries
[	endif
next
]

[
foreach $tmplibrary in $application.FunctionLibraries
	if $tmplibrary.Name <> "core" and $tmplibrary.Name <> "db" and $tmplibrary.Name <> "lang" and $tmplibrary.Name <> "edifact" and not $tmplibrary.HasOnlyLocalFunctions
]using [=$tmplibrary.Setting.namespace]; // application.functionlibraries
[  endif
next


if $AlgorithmGroup.IsLocalFunction
]namespace [=$AlgorithmGroup.LocalFunctionNamespace]
[else]
namespace [=$application.Name]
[endif]
{
	
	public class [=$classname] : Altova.TraceProvider 
	{
		#region Members
		// XML documents
[' ========== declare member variables ==========
foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]		protected [=$SourceLibrary.Name].[=$SourceLibrary.Type] m_[=$SourceLibrary.UniqueName]DocSourceObject; 
[	endif
next
]		// instances
[foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
	if $SourceLibrary.Kind = 1 ' XML Library
]		protected [write QualifiedTypeName($SourceLibrary.RootElement)]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 5 ' WSDL Library
]		protected [write QualifiedTypeName($SourceLibrary.Message)]	m_[=$SourceLibrary.Message.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 2 ' DB Library
]		protected [=$SourceLibrary.Name].[=$SourceLibrary.Type]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 3 ' Text Library
]		protected [=$SourceLibrary.Name].[=$SourceLibrary.Type]	m_[=$SourceLibrary.UniqueName]Instance;
[	endif
	if $SourceLibrary.Kind = 4 'Parameter Library
]		protected [=$SourceLibrary.DataType] m_[=$SourceLibrary.Name];
[	endif
next
]		// members
[foreach $Algorithm in $AlgorithmGroup.FlatMemberVariables
	if $Algorithm.Type = 8	' loop
			]		protected [=$Algorithm.SourceParentContext.Library.Name].[=$Algorithm.SourceParentContext.Type]	m_[=$Algorithm.Name];
[	else : if $Algorithm.Type = 11 ' assignment
		if $Algorithm.IsComplex
			if $Algorithm.DataTypeNr = 48  ' anyType
				]		protected Altova.Xml.AnyTypeNode	m_[=$Algorithm.VarID];
[			else
				]		protected [write QualifiedTypeName($Algorithm.SourceContext)]	m_[=$Algorithm.VarID];
[			endif		
		else
			]		protected [=$Algorithm.DataType]	m_[=$Algorithm.VarID];
[		endif
	endif : endif
next
if $AlgorithmGroup.TargetLibrary.Kind = 4	' Parameter library
]		protected [=$AlgorithmGroup.TargetLibrary.DataType]	m_[=$AlgorithmGroup.TargetLibrary.Name]TargetParameter;
[endif
]		#endregion //Members
[
call DeclareRun()
]			// Open the source(s)
[
$Indent 				= "			"
$Args = ""
$gFirstSourceInstance	= ""
call OpenSourceLibraries( $Args, $gFirstSourceInstance )
][=$Indent]// Create the target
[
$gTargetInstance 		= ""
call OpenTargetLibrary( $Args, $Indent, $gTargetInstance )
]
[=$Indent]// Execute mapping
[' ============== execute mapping =============
call ExecuteMapping( $Args, $Indent, $gFirstSourceInstance, $gTargetInstance )
]
			// Close the target
[
call FinalizeTargetLibrary()
]
			// Close the Source Library
[
call FinalizeSourceLibrary( $Args, $gFirstSourceInstance )
]		}
[


' ============== execute sub-algorithms =============
' -->>> AlgorithmGroup_Execution.spl : ImplementSubAlgorithms()
foreach $Algorithm in $AlgorithmGroup.FlatSubAlgorithms
	if $Algorithm.Type <> 11 and $Algorithm.Type <> 5	' Assignment, Variable
		'and not ($Algorithm.Type = 8 and $Algorithm.IsDocSwitchLoop) ' not an assignment and not a DocSwitch-loop

		' initialize local variables
		$Args				= ""
		$gSourceParameter	= ""
		$gTargetParameter	= ""
		$gIsFirstListLoop	= true
		$gIsDBLoop 			= false
		$ExceptionTargetType = ""
		$ExceptionTarget = ""
		
		call CalculateArguments( $Args, $Algorithm, $gSourceParameter, $gTargetParameter )
]
		protected void [=$Algorithm.Name]( [=$Args] ) //throws Exception 
		{
[	$Indent = "			"
	' ---------- initialisation ----------
		if $Algorithm.Type = 6 ' sourcedata
		call ExecuteSourceData( $Indent, $Algorithm, $gSourceParameter )
	else : if $Algorithm.Type = 8 ' loop
		call ExecuteBeginLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
	else : if $Algorithm.Type = 17 ' distribute
		call ExecuteBeginDistribute( $Indent, $Algorithm, $gSourceParameter )
	else : if $Algorithm.Type = 10 ' create
		call ExecuteBeginCreate( $Indent, $Algorithm )
	else : if $Algorithm.Type = 18 ' exception
			call ExecuteInstantiateNewTarget( $Indent, $Algorithm, $ExceptionTarget, $ExceptionTargetType )
		endif : endif : endif : endif : endif

		' ---------- apply sub-algorithms ----------
	$gIsFirstListLoop = true
	foreach $SubAlgorithm in $Algorithm.SubAlgorithms
		if $SubAlgorithm.Type = 11 ' assignment
			call ExecuteAssignment( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
		else : if $SubAlgorithm.Type = 5 ' variable
			call ExecuteVariable( $Indent, $SubAlgorithm, $gTargetParameter )
		else : if $SubAlgorithm.Type = 9 ' filter
			call ExecuteFilter( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
		else : if $SubAlgorithm.Type = 16	' exists-return
			call ExecuteIfExistsReturn( $Indent, $SubAlgorithm)
		else : if $Algorithm.Type = 17 and $SubAlgorithm.Type = 8
			call ExecuteDistLoop( $Indent, $SubAlgorithm, $gSourceParameter, $gTargetParameter )
		else : if $SubAlgorithm.Type = 8 and $SubAlgorithm.HasCreateChild_TargetTableLoop and $gIsFirstListLoop ' loop
			call ExecuteSubLoop( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
		else : if $SubAlgorithm.Type = 10 and $SubAlgorithm.IsTable and $gIsFirstListLoop ' create
			call ExecuteSubCreate( $Indent, $Algorithm, $SubAlgorithm, $gSourceParameter, $gTargetParameter, $gIsFirstListLoop )
		else
][=$Indent][=$SubAlgorithm.Name]( [if $gSourceParameter <> ""][=$gSourceParameter], [endif ][=$gTargetParameter] );
[			endif : endif : endif : endif : endif : endif : endif
	next
		' ---------- finalisation ----------
	if $Algorithm.Type = 8 'and not $Algorithm.IsParentLoop and not $Algorithm.IsDocSwitchLoop ' loop
		call ExecuteEndLoop( $Indent, $Algorithm, $gIsDBLoop, $gSourceParameter )
	else : if $Algorithm.Type = 17 ' distribute
		call ExecuteEndDistribute( $Indent, $Algorithm, $gTargetParameter )
	else : if $Algorithm.Type = 10 ' create
		call ExecuteEndCreate( $Indent, $Algorithm, $gTargetParameter, $gIsFirstListLoop )
	else : if $Algorithm.Type = 18 ' create exception
			if $ExceptionTargetType = "SchemaString"
				][=$Indent]throw new Altova.UserException([=$ExceptionTarget].Value);
[			else
				if $Mapping.WSDLBindingOperation.Output.Use = 12 ' SOAP encoded
					][=$Indent][=$ExceptionTarget].GenerateXsiTypeAttributes();
[				endif
				][=$Indent]throw new Altova.Xml.FaultException([=$ExceptionTarget], "[=$ExceptionTargetType]");
[	endif : endif : endif : endif : endif
]		}

[	endif 
next


if $AlgorithmGroup.IsLocalFunction
	$gArgs = ""
	$gIsFirst = true
	foreach $gSourceLibrary in $AlgorithmGroup.SourceLibraryList : if $gSourceLibrary.Kind = 4
		if not $gIsFirst : $gArgs = $gArgs & ", " : endif
		$gArgs = $gArgs & $gSourceLibrary.DataType & " " & $gSourceLibrary.UniqueName & "SourceParameter"
		$gIsFirst = false
	endif : next
]


	// global function in library-namespace
	public static [=$AlgorithmGroup.TargetContext.Library.DataType] [=$AlgorithmGroup.Name]Func( [=$gArgs] )
	{
		[=$classname]	function = new [=$classname]();
		[=$AlgorithmGroup.TargetContext.Library.DataType]	result = new [=$AlgorithmGroup.TargetContext.Library.DataType]();
[	$gArgs = ""
	$gIsFirst = true
]
		function.Run( [
	foreach $SourceLibrary in $AlgorithmGroup.SourceLibraryList
		if not $gIsFirst ], [ endif

		if $SourceLibrary.Kind = 1 ' XML Library
			] "[=$SourceLibrary.InputInstanceName]" [
		endif
		if $SourceLibrary.Kind = 2 ' Database Library
			] "[=$SourceLibrary.ADOConnectionString]" [
		endif
		if $SourceLibrary.Kind = 3 ' Text Parser Library
			] "[=$SourceLibrary.InputFileName]" [
		endif
		if $SourceLibrary.Kind = 4	' Parameter Library
			][=$SourceLibrary.UniqueName]SourceParameter[
		endif

		$gIsFirst = false
	next
	][if not $gIsFirst], [endif
	]result );

		return result;
	}


[endif]

  } 
}
