/**
 * Database.java
 *
 * This file was generated by [=$Host].
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the [=$HostShort] Documentation for further details.
 * [=$HostURL]
 */


package com.altova.db;

import com.altova.types.*;


public abstract class Database {
	protected java.sql.Connection 	conn;
	protected boolean 				bRollbackTransaction;
	protected int					transactionCount;

	// construction
	public Database(java.sql.Connection connection) {
		conn = connection;
		bRollbackTransaction = false;
		transactionCount = 0;
	}

	// accessors
	public java.sql.Connection getConnection() {
		return conn;
	}

	public void setRollbackTransactionOnClose() {
		bRollbackTransaction = true;
	}

	// operations
	public java.sql.ResultSet executeQuery(String query) throws java.sql.SQLException {
		return conn.createStatement().executeQuery(query);
	}

	public void executeCommand(String statement) throws java.sql.SQLException {
		conn.createStatement().execute( statement );
	}

	// transactions
	public void	beginTransaction( String sName )
	{
		if( transactionCount == 0 )
			internalBeginTransaction();
		else
			internalSetSavepoint( sName );

		transactionCount++;
	}

	public void	commitTransaction( String sName )
	{
		if( transactionCount< 1 )
			throw new DbExecuteException( DbExecuteException.EXECUTE, sName, " ERROR: No open transaction to commit!" );
		else if( transactionCount== 1 )
			internalCommitTransaction();
		//else
		//	ignore commit of nested transaction - they are done when main-transaction is commited.

		transactionCount--;
	}

	public void	rollbackTransaction( String sName )
	{
		if( transactionCount< 1 )
			throw new DbExecuteException( DbExecuteException.EXECUTE, sName, " ERROR: No open transaction to rollback!" );
		else if( transactionCount== 1 )
			internalRollbackTransaction();
		else
			internalRollbackToSavepoint( sName );

		transactionCount--;
	}

	protected abstract void	internalBeginTransaction() throws DbExecuteException;
	protected abstract void	internalCommitTransaction() throws DbExecuteException;
	protected abstract void	internalRollbackTransaction() throws DbExecuteException;
	protected abstract void	internalSetSavepoint( String sTransactionName ) throws DbExecuteException;
	protected abstract void	internalRollbackToSavepoint( String sTransactionName ) throws DbExecuteException;

	// helpers
	protected Command internalGet(String tableName) throws java.sql.SQLException {
		return new Command("SELECT * FROM " + tableName, false);
	}

	protected Command internalGet(String tableName, String param) throws java.sql.SQLException {
		return new Command("SELECT * FROM " + tableName + " " + param, false);
	}
}
