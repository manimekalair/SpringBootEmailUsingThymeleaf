////////////////////////////////////////////////////////////////////////
//
// [=$module].h
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////


#ifndef [=$module]_H_INCLUDED
#define [=$module]_H_INCLUDED

#if _MSC_VER > 1000
	#pragma once
#endif // _MSC_VER > 1000


#ifndef _USRDLL
	#define [=$module]_DECLSPECIFIER
#else
	#ifdef [=$module]_EXPORTS
		#define [=$module]_DECLSPECIFIER __declspec(dllexport)
	#else
		#define [=$module]_DECLSPECIFIER __declspec(dllimport)
	#endif
#endif


namespace [=$module]
{

////////////////////////////////////////////////////////////////////////
// [=$module]Database 
////////////////////////////////////////////////////////////////////////


class [=$module]_DECLSPECIFIER [=$module]Database : public CDatabase 
{
public:
	// construction and destruction
	[=$module]Database() : CDatabase() {}
	[=$module]Database(const tstring& sConnectionString);
	virtual ~[=$module]Database();

	[=$module]Database& operator=(const [=$module]Database& rOther);

protected:
	virtual void	InternalBeginTransaction();
	virtual void	InternalCommitTransaction();
	virtual void	InternalRollbackTransaction();
	virtual void	InternalSetSavepoint( LPCTSTR szTransactionName );
	virtual void	InternalRollbackToSavepoint( LPCTSTR szTransactionName );
};

[foreach $table in $library.Tables
]
////////////////////////////////////////////////////////////////////////
// [=$table.Name]Set
////////////////////////////////////////////////////////////////////////

class [=$module]_DECLSPECIFIER [=$table.Name]Set : public CRecordSet 
{
public:
	// construction and destruction
	[=$table.Name]Set();
	[=$table.Name]Set( CDatabase& rDatabase, const CCommand& cmdQuery = CCommand() );
	virtual ~[=$table.Name]Set() {}

	// accessors
[	foreach $column in $table.Columns
]	[=$column.Type] Get[=$column.Name]() 				{ return InternalGetValue(_T(\"[=$column.DBName]\")); }
	void Set[=$column.Name]([=$column.Type] value);

[	next
]
	// override from CRecordSet
	virtual void			Prepare( bool bReadOnlyAccess = false );

	virtual _variant_t		GetValueByName(const tstring& sColumn);
	virtual void			SetValueByName(const tstring& sColumn, const _variant_t& vValue );

protected:
	// helper functions
	void					Reset();

	// members for internal buffer
[	foreach $column in $table.Columns
]	[=$column.Type]	m_[=$column.Name];
[	next
]};


[next
]

} // namespace [=$module]


#endif // [=$module]_H_INCLUDED
