//
// [=$table.Name]Set.cs
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//

using System;
using System.Collections;
using Altova.Types;
using Altova.Db;

namespace [=$module]
{

	public class [=$table.Name]Set : Altova.Db.RecordSet 
	{
		#region Members
[$ColumnCount = 0
foreach $column in $table.Columns
]		protected [=$column.Type] _[=$column.Name] = new [=$column.Type]();
[	$ColumnCount = $ColumnCount + 1
next
]		// number of columns = [=$ColumnCount]
		#endregion Members

		#region Construction
		public [=$table.Name]Set(Database database) 
			: base(database, true)
		{
			Prepare( true );
		}

		public [=$table.Name]Set(Database database, Command command)
			: base(database, true)
		{
			Prepare( true );
			this.commands.Add( command );
			Execute( null );
		}
		#endregion Construction

		#region Accessors
[foreach $column in $table.Columns]
		public [=$column.Type] [=$column.Name]
		{
			get
			{
				return new [=$column.Type](_[=$column.Name]);
			}
			set
			{
				_[=$column.Name] = new [=$column.Type](value);
			}
		}
[next
]		#endregion Accessors

		#region Operations
		protected bool Empty()
		{
[foreach $column in $table.Columns
]			_[=$column.Name] = new [=$column.Type]();
[next
]			return false;
		}

		public override void Prepare( bool bReadOnlyAccess )
		{
			isReadAccess = bReadOnlyAccess;

			// set all members to null
[foreach $column in $table.Columns
]			_[=$column.Name].SetNull( true );
[next
]		}

		public override ISchemaType GetValueByName( string column )
		{
[foreach $column in $table.Columns
]			if( column == "[=$column.DBName]" )
				return 	_[=$column.Name];
[next
]
			return null;
		}

		public override bool Read( bool bClearIfEmpty ) 
		{
			if(  !HasResultSet  )
				return ( bClearIfEmpty ? Empty() : false );
			if(  !actResultSet.Read()  )
			{
				if( isReadAccess )
					actResultSet.Dispose();
				return ( bClearIfEmpty ? Empty() : false );
			}
			if( !isReadAccess )
			{
				if( HasColumn( "MAPFORCE_DEL_ROWS" ) )
					mapforceDelRows = new SchemaInt(actResultSet, "MAPFORCE_DEL_ROWS");	
			}
[foreach $column in $table.Columns
]			if( HasColumn( "[=$column.DBName]" ) )
				_[=$column.Name] = new [=$column.Type](actResultSet, "[=$column.DBName]");
[next
]
			return true;
		}

[foreach $column in $table.Columns]
		public [=$column.Type] Get[=$column.Name]()
		{
			return new [=$column.Type](_[=$column.Name]);
		}
[next
]		#endregion Operations
	}
}