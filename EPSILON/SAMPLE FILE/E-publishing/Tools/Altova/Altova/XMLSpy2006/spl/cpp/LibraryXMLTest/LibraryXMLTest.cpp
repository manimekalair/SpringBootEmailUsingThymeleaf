////////////////////////////////////////////////////////////////////////
//
// [=$module]Test.cpp
//
// This file was generated by [=$Host].
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the [=$HostShort] Documentation for further details.
// [=$HostURL]
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include "[=$module].h"
using namespace std;


#ifdef _DEBUG
	#define new DEBUG_NEW
	#undef THIS_FILE
	static char THIS_FILE\[\] = __FILE__;
#endif


[if $mfc
]	CWinApp theApp;

[endif
]void Example()
{
[	$RootType			= ""
	$RootSchemaName		= ""
	$RootNamespaceURI	= ""
	foreach $class in $classes
		if $class.IsInternal
			foreach $member in $class.Members
				if $member.HasTypeObject and $member.TypeObject.NamespacePrefix <> ""
					$RootType = $member.TypeObject.NamespacePrefix & "::" & $member.Type
				else
					$RootType = $member.Type
				endif
				$RootSchemaName = $member.XmlNameCpp
				$RootNamespaceURI = $member.NamespaceURICpp
			next
		endif
	next
]	////////////////////////////////////////////////////////////////////
	//
	// TODO:
	//   Insert your code here...
	//
	// Example code to create and save a structure:
	//   C[=$module]Doc doc;
	//   [=$RootType] root;
	//   ...
	//   doc.SetRootElementName(_T("[=$RootNamespaceURI]"), _T("[=$RootSchemaName]"));
[if $domtype = 2 and $SchemaType = 1 ' Setting DOCTYPE supported by Xerces only
]	//   doc.SetDTDLocation(_T("[=$SchemaFilename]")); // optional
[else : if $SchemaType = 2
]	//   doc.SetSchemaLocation(_T("[=$SchemaFilename]")); // optional
[endif : endif
]	//   doc.Save(_T("[=$module]1.xml"), root);
	//
	// Example code to load and save a structure:
	//   C[=$module]Doc doc;
	//   [=$RootType] root = doc.Load(_T("[=$module]1.xml"));
	//   ...
	//   doc.Save(_T("[=$module]1.xml"), root);
	//
	////////////////////////////////////////////////////////////////////
}


int _tmain(int argc, TCHAR* argv\[\], TCHAR* envp\[\])
{
	tcout << _T("[=$module] Test Application") << endl;

[if $mfc
]	if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(), 0))
	{
		cerr << "Fatal Error: MFC initialization failed" << endl;
		return 1;
	}
[endif
]	try
	{
[if $domtype = 2
]		xercesc::XMLPlatformUtils::Initialize();
[else
]		CoInitialize(NULL);
[endif
]
		Example();

[if $domtype = 2
]		xercesc::XMLPlatformUtils::Terminate();
[else
]		CoUninitialize();
[endif
]
		tcout << _T("OK") << endl;
		return 0;
	}
	catch (CXmlException& e)
	{
		tcerr << _T("Error: ") << e.GetInfo().c_str() << endl;
		return 1;
	}
[if $domtype = 2
]	catch (xercesc::XMLException& e)
	{
		tcerr << _T("Xerces XMLException: ") << e.getSrcFile() << _T("(")
			  << e.getSrcLine() << _T("): ") << e.getMessage() << endl;
		return 1;
	}
	catch (xercesc::DOMException& e)
	{
		tcerr << _T("Xerces DOMException ") << e.code;
		if (e.msg)
			tcerr << _T(": ") << e.msg;
		tcerr << endl;
		return 1;
	}
[else
]	catch (_com_error& e)
	{
		tcerr << _T("COM-Error from ") << (TCHAR*)e.Source() << _T(":") << endl;
		tcerr << (TCHAR*)e.Description() << endl;
		return 1;
	}
[endif
]	catch (std::exception& e)
	{
		cerr << "Exception: " << e.what() << endl;
		return 1;
	}
	catch (...)
	{
		tcerr << _T("Unknown error") << endl;
		return 1;
	}
}
